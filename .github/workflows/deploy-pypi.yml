name: Github Deploy  # 定义工作流的名称

# on: [push, pull_request]
on:
  push:
    tags:
      - '*'  # 监听所有标签的推送，或者可以根据需要指定标签模式，如 'v*' 表示所有以 v 开头的标签

defaults:
  run:
    shell: bash  # 默认使用 bash 作为 shell 来执行命令

jobs:
  # 作业1：构建并打包 Python 分发包
  build-distribution:
    name: Build distribution  # 设置作业名称
    runs-on: ubuntu-latest  # 指定运行环境为最新版本的 Ubuntu

    steps:
      # 1. Checkout 仓库代码
      - uses: actions/checkout@v4  # 使用 GitHub 官方的 checkout action 来拉取代码

      # 2. 缓存 Python 依赖项
      - name: Cache Python dependencies
        uses: actions/cache@v3  # 使用缓存 action 来加速依赖安装
        with:
          path: ~/.cache/pip  # 缓存路径
          key: ${{ runner.os }}-pip-cache-${{ hashFiles('**/requirements.txt') }}  # 缓存键，依赖文件变化时更新
          restore-keys: |
            ${{ runner.os }}-pip-cache- 

      # 3. 设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v4  # 使用 setup-python action 来设置 Python 环境
        with:
          python-version: "3.12"  # 使用 Python 3.12
          check-latest: true  # 检查 Python 是否是最新版本

      # 4. 创建并激活 Python 虚拟环境
      - name: Set up Python venv
        run: |
          python3 -m venv .venv  # 创建虚拟环境
          source .venv/bin/activate  # 激活虚拟环境
          python3 --version  # 查看 Python 版本
          python3 -m pip install --upgrade pip  # 升级 pip

      # 5. 安装系统依赖：libegl1
      - name: Install libegl1
        run: |
          sudo apt update && sudo apt install -y libegl1  # 安装 libegl1，可能是依赖某些图形库

      # 6. 安装 setuptools 和 wheel
      - name: Install setuptools, wheel
        run: |
          python3 -m pip install setuptools wheel  # 安装构建工具 setuptools 和 wheel

      # 7. 安装项目依赖
      - name: Install requirements.txt
        run: |
          python3 -m pip install -r requirements.txt  # 安装项目依赖

      # 8. 下载最新的资产文件
      - name: Download latest asset files
        run: |
          python3 -m pip install requests  # 安装 requests 库
          python3 Deploy.py --download  # 执行自定义的 Deploy.py 脚本下载资产

      # 9. 构建源代码包和二进制包
      - name: Build a binary wheel and a source tarball
        run: python3 setup.py sdist bdist_wheel  # 构建源代码包和 wheel 包

      # 11. 列出 dist/ 目录下的文件
      - name: List files in dist/
        run: ls -l dist/

      # 10. 上传构建的包为工件
      - name: Store the distribution packages
        uses: actions/upload-artifact@v3  # 使用 GitHub 的 upload-artifact action 上传构建的包
        with:
          name: python-package-distributions  # 上传的包名
          path: |
            dist/*.tar.gz
            dist/*.whl

  # 作业2：将包发布到 PyPI
  publish-to-pypi:
    name: Publish Python distribution to PyPI  # 设置作业名称
    # if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    if: false  # 设置 if 为 false，表示这个作业不会执行
    needs:
      - build-distribution  # 需要 build-distribution 作业先执行完成
      - deploy-binaries  # 需要 deploy-binaries 作业先执行完成
    runs-on: ubuntu-latest  # 运行环境
    environment:
      name: deploy-pypi  # 环境名称
      url: https://pypi.org/p/Furious-GUI  # PyPI 页面链接
    permissions:
      id-token: write  # 必须的权限，允许向 PyPI 发布

    steps:
      # 1. 下载构建的分发包
      - name: Download all the dists
        uses: actions/download-artifact@v3  # 下载先前上传的分发包
        with:
          name: python-package-distributions  # 上传的包名
          path: dist/  # 下载到 dist/ 目录

      # 2. 将分发包发布到 PyPI
      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1  # 使用 PyPI 官方的发布 action

  # 作业3：在多个操作系统上部署二进制文件
  deploy-binaries:
    name: Deploy binaries on ${{ matrix.os }}  # 设置作业名称
    runs-on: ${{ matrix.os }}  # 使用矩阵策略，分别在不同操作系统上运行
    strategy:
      matrix:
        os: [windows-2022, macos-13, macos-14]  # 在 Windows 和 macOS 上部署

    env:
      # 设置环境变量，指定老版本的 PySide6
      PYSIDE6_LEGACY_VERSION: "6.4.3"
      # 设置目标版本的 PySide6
      PYSIDE6_TARGET_VERSION: "6.8.1"

    steps:
      # 1. Checkout 仓库代码
      - uses: actions/checkout@v4  # 使用 checkout action 拉取代码

      # 2. 缓存 Python 依赖项
      - name: Cache Python dependencies
        uses: actions/cache@v3  # 使用缓存加速依赖安装
        with:
          path: ~/.cache/pip  # 缓存路径
          key: ${{ runner.os }}-pip-cache-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-cache-

      # 3. 设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v4  # 设置 Python 环境
        with:
          python-version: "3.12"  # 使用 Python 3.12
          check-latest: true  # 检查是否是最新版本

      # 4. 创建并激活 Python 虚拟环境
      - name: Set up Python venv
        run: |
          python3 -m venv .venv  
          if [ "$RUNNER_OS" == "macOS" ]; then
            source .venv/bin/activate  
          elif [ "$RUNNER_OS" == "Windows" ]; then
            .venv/Scripts/activate  
          else
            echo "$RUNNER_OS not supported" 
            exit 1
          fi
          python3 --version  
          python3 -m pip install --upgrade pip  

      # 5. 安装 macOS 特定的依赖
      - name: Install macOS dependencies
        run: |
          brew install create-dmg  # 在 macOS 上安装 create-dmg
        if: runner.os == 'macOS'  # 仅在 macOS 上执行

      # 6. 移除 macOS Intel 架构上的问题依赖
      - name: Remove problematic brew libs on Intel Mac
        run: |
          brew remove --force --ignore-dependencies openssl@3  # 移除过期的 OpenSSL 库
          brew cleanup openssl@3  # 清理依赖
        if: runner.os == 'macOS' && runner.arch == 'X64'  # 仅在 Intel 架构的 macOS 上执行

      # 7. 安装 setuptools 和 wheel
      - name: Install setuptools, wheel
        run: |
          python3 -m pip install setuptools wheel  # 安装构建工具

      # 8. 安装 PySide6-Essentials
      - name: Install PySide6-Essentials
        run: |
          python3 -m pip install PySide6-Essentials==$PYSIDE6_TARGET_VERSION  # 安装指定版本的 PySide6

      # 9. 安装项目依赖
      - name: Install requirements.txt
        run: |
          python3 -m pip install -r requirements.txt  # 安装项目依赖

      # 10. 安装 numpy<2
      - name: Install numpy<2
        run: |
          python3 -m pip install "numpy<2"

      - name: Install nuitka, imageio
        run: |
          python3 -m pip install nuitka imageio

      - name: Set up go 1.20
        uses: actions/setup-go@v4
        with:
          # 设置 Go 语言版本为 1.20，并确保使用最新版本
          go-version: "1.20"
          check-latest: true

      - name: Install go 1.20 dependencies
        run: |
          go version
          python3 -m pip install "hysteria > 1.3.5"

      - name: Set up go 1.23
        uses: actions/setup-go@v4
        with:
          # 设置 Go 语言版本为 1.23，并确保使用最新版本
          go-version: "1.23"
          check-latest: true

      - name: Install go 1.23 dependencies
        run: |
          go version
          python3 -m pip install "Xray-core >= 1.8.8" "hysteria2 >= 2.0.4" "tun2socks > 2.5.2"

      - name: Download latest asset files
        run: |
          python3 -m pip install requests
          python3 Deploy.py --download

      - name: Run deploy script
        run: python3 Deploy.py
        # 执行部署脚本，开始部署最新的版本

      - name: Store the distribution packages
        uses: actions/upload-artifact@v3
        with:
          name: binary-distributions
          path: |
            *.zip
            *.dmg

  github-release:
    name: >-
      Upload to GitHub Release
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - deploy-binaries
      # 依赖于 deploy-binaries 作业，即所有二进制文件都已准备好后才能执行
      # - publish-to-pypi  # 如果需要将发布内容上传到 PyPI，取消此行注释
    runs-on: ubuntu-latest
    # 在 Ubuntu 最新版本的虚拟环境中运行发布作业

    permissions:
      contents: write  # 允许当前 job 对 GitHub 仓库的内容（例如发布 Release、上传文件）具有写权限。
      id-token: write  # 允许生成 OIDC（OpenID Connect）令牌，用于安全的发布操作。

    steps:
      # 下载二进制文件
      - name: Download all the dists # 表示下载所有二进制文件。
        uses: actions/download-artifact@v3 # 调用 GitHub 官方的下载工件插件 download-artifact。
        with:
          name: binary-distributions # 指定要下载的工件名称。
          path: dist/ # 将下载的文件存储到工作目录下的 dist/ 文件夹中。
      # 创建 GitHub Release
      - name: Create GitHub Release # 表示创建 GitHub Release。
        env:
          GITHUB_TOKEN: ${{ github.token }} # 使用 GitHub Secrets 中的 RELEASE_TOKEN，提供身份验证权限。
        # 把多行文本合并于单行文本
        # ${{ github.ref_name }}：Release 的版本号，通常由 Git 标签（refs/tags/...）自动提供。
        #--repo '${{ github.repository }}'：指定操作的仓库，即当前仓库。
        #--notes ""：指定 Release 的备注信息为空。
        #--prerelease：将该 Release 标记为“预发布版本”。
        #--generate-notes：自动生成发布说明（如从提交历史中提取变更日志）。
        #--title 'Furious ${{ github.ref_name }}'：为 Release 指定标题，格式为“Furious + 版本号”。
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --notes ""
          --prerelease
          --generate-notes
          --title 'Furious ${{ github.ref_name }}'

      # 上传文件到 GitHub Release
      - name: Upload artifact signatures to GitHub Release # 表示将生成的工件文件上传到之前创建的 Release 中。
        # 使用 GitHub Secrets 中的 RELEASE_TOKEN，提供身份验证权限。
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # gh release upload：向指定的 Release 上传文件。
        # ${{ github.ref_name }}：指定目标 Release 的版本号。
        # dist/**：上传 dist/ 文件夹下的所有文件。
        # --repo '${{ github.repository }}'：指定目标仓库。
        run: >-
          gh release upload
          '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'